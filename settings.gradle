apply from: 'compile-api.gradle'
//dependencyResolutionManagement {
//    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
//    repositories {
//        google()
//        mavenCentral()
//    }
//}
def includeWithApi(String moduleName) {
    //先正常加载这个模块
    include(moduleName)
    //找到这个模块的路径
    String originDir = project(moduleName).projectDir

    // originDir=======/Users/wangjianan/Documents/study/Android/demo/ReadingGallery/bizModule/homeModule
    println("originDir=======${originDir}")


    //这个是新的路径
    String targetDir = "${originDir}-api"
    // targetDir=======/Users/wangjianan/Documents/study/Android/demo/ReadingGallery/bizModule/homeModule-api
    println("targetDir=======${targetDir}")


    //原模块的名字
    String originName = project(moduleName).name
    // originName=======homeModule
    println("originName=======${originName}")


    //新模块的名字
    def sdkName = "${originName}-api"
    // sdkName=======homeModule-api
    println("sdkName=======${sdkName}")

    //这个是公共模块的位置，我预先放了一个 新建的api.gradle 文件进去
    String apiGradle = project(":commonBaseLib").projectDir
    //apiGradle=======/Users/wangjianan/Documents/study/Android/demo/ReadingGallery/commonBaseLib
    println("apiGradle=======${apiGradle}")

    // 每次编译删除之前的文件
    // targetDir=======/Users/wangjianan/Documents/study/Android/demo/ReadingGallery/bizModule/homeModule-api
    deleteDir(targetDir)

    //复制.api文件到新的路径
    copy() {
        // originDir=======/Users/wangjianan/Documents/study/Android/demo/ReadingGallery/bizModule/homeModule
        from originDir
        // targetDir=======/Users/wangjianan/Documents/study/Android/demo/ReadingGallery/bizModule/homeModule-api
        into targetDir
        exclude '**/build/'
        exclude '**/res/'
        include '**/*.api'
    }
    // 作用是将homeModule中的.api文件，负责到homeModule-api中，作为实体分享给其他模块 比如这里就是一个Book.api


    //直接复制公共模块的AndroidManifest文件到新的路径，作为该模块的文件
    copy() {
        //apiGradle=======/Users/wangjianan/Documents/study/Android/demo/ReadingGallery/commonBaseLib/src/main/AndroidManifest.xml
        from "${apiGradle}/src/main/AndroidManifest.xml"
        // targetDir=======/Users/wangjianan/Documents/study/Android/demo/ReadingGallery/bizModule/homeModule-api/src/main
        into "${targetDir}/src/main/"
    }

    //复制 gradle文件到新的路径，作为该模块的gradle
    copy() {
        from "${apiGradle}/api.gradle"
        into "${targetDir}/"
    }

    //删除空文件夹
    deleteEmptyDir(new File(targetDir))

//    //为AndroidManifest新建路径，路径就是在原来的包下面新建一个api包，作为AndroidManifest里面的包名
    String packagePath = "${targetDir}/src/main/java/com/kpa/${originName}"
//
//
//    //修改AndroidManifest文件包路径
    // targetDir=======/Users/wangjianan/Documents/study/Android/demo/ReadingGallery/bizModule/homeModule-api/src/main/AndroidManifest.xml
    fileReader("${targetDir}/src/main/AndroidManifest.xml", "jason", "${originName}.api")
//
//    new File(packagePath).mkdirs()

    //重命名一下gradle
    def build = new File(targetDir + "/api.gradle")
    if (build.exists()) {
        build.renameTo(new File(targetDir + "/build.gradle"))
    }

    // 重命名.api文件，生成正常的.java文件
    renameApiFiles(targetDir, '.api', '.kt')

    print(">>>>>>>>>$sdkName")

    //正常加载新的模块
    include ":bizModule:$sdkName"
}

private void deleteEmptyDir(File dir) {
    if (dir.isDirectory()) {
        File[] fs = dir.listFiles()
        if (fs != null && fs.length > 0) {
            for (int i = 0; i < fs.length; i++) {
                File tmpFile = fs[i]
                if (tmpFile.isDirectory()) {
                    deleteEmptyDir(tmpFile)
                }
                if (tmpFile.isDirectory() && tmpFile.listFiles().length <= 0) {
                    tmpFile.delete()
                }
            }
        }
        if (dir.isDirectory() && dir.listFiles().length == 0) {
            dir.delete()
        }
    }
}

private void deleteDir(String targetDir) {
    FileTree targetFiles = fileTree(targetDir)
    targetFiles.exclude "*.iml"
    targetFiles.each { File file ->
        //targetFiles======/Users/wangjianan/Documents/study/Android/demo/ReadingGallery/bizModule/homeModule-api/build.gradle
        //targetFiles======/Users/wangjianan/Documents/study/Android/demo/ReadingGallery/bizModule/homeModule-api/src/main/AndroidManifest.xml
        //targetFiles======/Users/wangjianan/Documents/study/Android/demo/ReadingGallery/bizModule/homeModule-api/src/main/java/com/winwang/homemodule/model/Book.kt
        println("targetFiles======${file.getAbsolutePath()}")
        file.delete()
    }
}

/**
 * rename api files(java, kotlin...)
 */
private def renameApiFiles(root_dir, String suffix, String replace) {
    FileTree files = fileTree(root_dir).include("**/*$suffix")
    files.each {
        File file ->
            file.renameTo(new File(file.absolutePath.replace(suffix, replace)))
    }
}

//替换AndroidManifest里面的字段
def fileReader(path, name, sdkName) {
    def readerString = ""
    def hasReplace = false

    file(path).withReader('UTF-8') { reader ->
        reader.eachLine {
            if (it.find(name)) {
                it = it.replace(name, sdkName)
                hasReplace = true
            }
            readerString <<= it
            readerString << '\n'
        }

        if (hasReplace) {
            file(path).withWriter('UTF-8') {
                within ->
                    within.append(readerString)
            }
        }
        return readerString
    }
}

rootProject.name = "AndroidNativeScaffold"
include ':app'
include ':Frame:LibFlycoTabLayout'
include ':commonAppLib'
include ':commonBaseLib'

// 项目业务相关组件
include ':bizModule:mainModule' // 首页模块
include ':bizModule:detailModule' // 详情模块
include ':bizModule:catModule' // 自定义模块
includeWithApi(':bizModule:homeModule') // 单独抽离实体类为了其它组件复用
